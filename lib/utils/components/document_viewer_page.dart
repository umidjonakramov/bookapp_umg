// import 'package:advance_pdf_viewer2/advance_pdf_viewer.dart';// import 'package:firebase_storage/firebase_storage.dart';// import 'package:flutter/material.dart';//// class DocumentViewerPage extends StatefulWidget {//   final String book;////   const DocumentViewerPage({super.key, required this.book});////   @override//   State<DocumentViewerPage> createState() => _DocumentViewerPageState();// }//// class _DocumentViewerPageState extends State<DocumentViewerPage> {//   PDFDocument? document;//   bool _isLoading = true;////   Future<void> loadDocument() async {//     try {//       final ref = FirebaseStorage.instance//           .ref("${widget.book.split('/')[3]}/${widget.book.split('/')[4]}");////       final url = await ref.getDownloadURL();////       document = await PDFDocument.fromURL(url);//     } catch (e) {//       print('Error loading document: $e');//     }////     if (mounted) {//       setState(() => _isLoading = false);//     }//   }////   @override//   void initState() {//     super.initState();//     loadDocument();//   }////   @override//   Widget build(BuildContext context) {//     return Scaffold(//       body: _isLoading//           ? Center(child: CircularProgressIndicator())//           : document != null//           ? PDFViewer(document: document!)//           : Center(child: Text('Failed to load document')),//     );//   }// }import 'dart:async';import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_cached_pdfview/flutter_cached_pdfview.dart';class PDFViewerFromAsset extends StatelessWidget {  PDFViewerFromAsset({Key? key, required this.pdfAssetPath}) : super(key: key);  final String pdfAssetPath;  final Completer<PDFViewController> _pdfViewController =      Completer<PDFViewController>();  final StreamController<String> _pageCountController =      StreamController<String>();  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        title: const Text(''),        actions: <Widget>[          StreamBuilder<String>(              stream: _pageCountController.stream,              builder: (_, AsyncSnapshot<String> snapshot) {                if (snapshot.hasData) {                  return Center();                }                return const SizedBox();              }),        ],      ),      body: PDF(        enableSwipe: true,        swipeHorizontal: true,        autoSpacing: false,        pageFling: false,        onPageChanged: (int? current, int? total) =>            _pageCountController.add('${current! + 1} - $total'),        onViewCreated: (PDFViewController pdfViewController) async {          _pdfViewController.complete(pdfViewController);          final int currentPage = await pdfViewController.getCurrentPage() ?? 0;          final int? pageCount = await pdfViewController.getPageCount();          _pageCountController.add('${currentPage + 1} - $pageCount');        },      ).fromAsset(        pdfAssetPath,        errorWidget: (dynamic error) => Center(child: Text(error.toString())),      ),      floatingActionButton: FutureBuilder<PDFViewController>(        future: _pdfViewController.future,        builder: (_, AsyncSnapshot<PDFViewController> snapshot) {            if (snapshot.hasData && snapshot.data != null) {                return Padding(                  padding: const EdgeInsets.symmetric(horizontal: 8.0),                  child: Row(                    mainAxisSize: MainAxisSize.max,                    mainAxisAlignment: MainAxisAlignment.spaceAround,                    children: <Widget>[                      InkWell(                          onTap: () async {                            final PDFViewController pdfController = snapshot.data!;                            final int currentPage =                                (await pdfController.getCurrentPage())! - 1;                            if (currentPage >= 0) {                              await pdfController.setPage(currentPage);                            }                          },                          child: Icon(                            Icons.chevron_left_outlined,                            size: 30,                          )),                      InkWell(                          onTap: () async {                            final PDFViewController pdfController = snapshot.data!;                            final int currentPage =                                (await pdfController.getCurrentPage())! + 1;                            final int numberOfPages =                                await pdfController.getPageCount() ?? 0;                            if (numberOfPages > currentPage) {                              await pdfController.setPage(currentPage);                            }                          },                          child: Icon(                            Icons.chevron_right_outlined,                            size: 30,                          ))                    ],                  ),                );            }          return const SizedBox();        },      ),    );  }}